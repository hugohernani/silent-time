package services;

import ia.hugo.silencetime.R;

import java.util.ArrayList;
import java.util.List;

import broadcasts.IniciarNotificacao;

import model.Agendamento;
import persistencia.EventsAndroid;
import android.app.AlarmManager;
import android.app.IntentService;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.media.AudioManager;
import android.util.Log;
import android.widget.Toast;

public class AlarmesService extends IntentService{
	
	public static final String CRIAR_NOTIFICACAO_PARA_VIBRACAO = "istoVibrate";
		
	
	@Override
	public void onCreate() {
		super.onCreate();
	}
	
	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		Log.w("alarmService-StartCommand", "StartComand starting...");
		
		onHandleIntent(intent);
		return START_STICKY;
	}
	
	public AlarmesService() {
		super("AlarmesService");
	}

	@Override
	protected void onHandleIntent(Intent intent) {
		Log.w("alarmService-onHandleIntent", "Iniciando o onHandleIntent de AlarmesService");
		
		EventsAndroid events = new EventsAndroid(getBaseContext());
		
		// captura os eventos e armazena na lista de objetos Agendamento
		ArrayList<Agendamento> lista = events.getEvents(intent.getLongExtra("calendarTimeInMillis", -1L));
		
		if(lista.isEmpty()){
			Toast.makeText(getBaseContext(), "Nao há agendamentos a adicionar para este(s) dia(s)!", Toast.LENGTH_LONG).show();
		}else{
			Toast.makeText(getBaseContext(), "Serão criados " + lista.size() + " controles de som para os agendamentos!", Toast.LENGTH_SHORT).show();
			
			AlarmManager alarmManager = (AlarmManager) getSystemService(ALARM_SERVICE);
			
			Log.i("alarmService-onHandleIntent", "As " + lista.size()*2 + " notificações serão programadas agora");
			for (final Agendamento agendamento : lista) {
				Intent intentNotificacaoVibrar = new Intent(AlarmesService.this, IniciarNotificacao.class);
				
				intentNotificacaoVibrar.putExtra(CRIAR_NOTIFICACAO_PARA_VIBRACAO, Boolean.TRUE);
				intentNotificacaoVibrar.putExtra(IniciarNotificacao.ID_EVENTO_AGENDAMENTO, agendamento.getId_evento());
				intentNotificacaoVibrar.putExtra(IniciarNotificacao.TITULO_AGENDAMENTO, agendamento.getTitulo());
				intentNotificacaoVibrar.putExtra(IniciarNotificacao.DATA_INICIAL_AGENDAMENTO, agendamento.getDataInicial());

				PendingIntent piVibrar = PendingIntent.getBroadcast(getBaseContext(), 0, intentNotificacaoVibrar, 0);
				Toast.makeText(getBaseContext(), "Data inicial deste agendamento: " + agendamento.getData(agendamento.getDataInicial()), Toast.LENGTH_LONG).show();
		        alarmManager.set(AlarmManager.RTC_WAKEUP, agendamento.getDataInicial(), piVibrar);
		        
		        Intent intentNotificacaoSom = new Intent(AlarmesService.this, IniciarNotificacao.class);
		        
		        intentNotificacaoSom.putExtra(CRIAR_NOTIFICACAO_PARA_VIBRACAO, Boolean.FALSE);
				intentNotificacaoSom.putExtra(IniciarNotificacao.ID_EVENTO_AGENDAMENTO, agendamento.getId_evento());
				intentNotificacaoSom.putExtra(IniciarNotificacao.TITULO_AGENDAMENTO, agendamento.getTitulo());
				intentNotificacaoSom.putExtra(IniciarNotificacao.DATA_INICIAL_AGENDAMENTO, agendamento.getDataInicial());
				
				PendingIntent piSom = PendingIntent.getBroadcast(getBaseContext(), 0, intentNotificacaoSom, 0);
		        alarmManager.set(AlarmManager.RTC_WAKEUP, agendamento.getDataFinal(), piSom);

			}
		}
		stopSelf();
	}
}