package ia.hugo.silencetime;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;

import services.AlarmesService;
import utils.ViewPagerAdapter;
import widget.SilenceTimeWidgetProvider;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.TabHost;
import android.widget.TabHost.OnTabChangeListener;
import android.widget.TabHost.TabContentFactory;
import fragments.OpcoesPadraoFragment;
import fragments.OpcoesPadraoFragment.OpcoesPadraoFragmentInterface;
import fragments.SugestoesFragment;
import fragments.SugestoesFragment.SugestoesFragmentInterface;

public class SilenciarOpcoes extends FragmentActivity 
		implements OnPageChangeListener, OnTabChangeListener,
					SugestoesFragmentInterface,
					OpcoesPadraoFragmentInterface{
	
	private static Integer posTab;
	private TabHost mTabHost;
	private ViewPager mViewPager;
	private PagerAdapter mPagerAdapter;
	private HashMap<String, TabInfo> mapTabInfo = new
			HashMap<String, SilenciarOpcoes.TabInfo>();

	// Objeto armazenado na aba.
	private class TabInfo{
		private String tag;
		private Class<?> classe;
		private Bundle args;
		private Fragment fragment;
		
		TabInfo(String tag, Class<?> classe, Bundle args) {
			this.tag = tag;
			this.classe = classe;
			this.args = args;
		}
	}
	
	// to create a view to tab
	class TabFactory implements TabContentFactory{
		
		private final Context mContext;
		
		public TabFactory(Context context){
			this.mContext = context;
		}
		
		@Override
		public View createTabContent(String tag){
			View v = new View(mContext);
			v.setMinimumHeight(0);
			v.setMinimumWidth(0);
			return v;
		}
	}

	private Intent mIntentService;
	private Calendar mCalendar;
	private Calendar calendarAtual;
	
	private Integer horas;
	private Integer minutos;
	private Integer diasRestantes;
	
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_silenciar_opcoes);
		
		mIntentService = new Intent(this, AlarmesService.class);
		
		mCalendar = new GregorianCalendar();
		calendarAtual = new GregorianCalendar();
		
		this.initializeTabHost(savedInstanceState);
		if (savedInstanceState != null){
			mTabHost.setCurrentTabByTag(savedInstanceState.getString("tag"));
		}
		this.initializeViewPager();
	}
	
	@Override
	protected void onSaveInstanceState(Bundle outState) {
		outState.putString("tag", mTabHost.getCurrentTabTag());
		super.onSaveInstanceState(outState);
	}
	
	private void initializeViewPager(){
		
		List<Fragment> fragments = new Vector<Fragment>();
		fragments.add(Fragment.instantiate(this, SugestoesFragment.class.getName()));
		fragments.add(Fragment.instantiate(this, OpcoesPadraoFragment.class.getName()));
		this.mPagerAdapter = new ViewPagerAdapter(super.getSupportFragmentManager(), fragments);
		this.mViewPager = (ViewPager)
				findViewById(R.id.viewpager);
		this.mViewPager.setAdapter(mPagerAdapter);
		this.mViewPager.setOnPageChangeListener(this);
	}
	
	private void initializeTabHost(Bundle args){
		mTabHost = (TabHost)
				findViewById(android.R.id.tabhost);
		mTabHost.setup();
		TabInfo tabInfo = null;
		SilenciarOpcoes.AddTab(this, this.mTabHost,
				this.mTabHost.newTabSpec("Tab1").setIndicator("Sugestões"),
				(tabInfo = new TabInfo("Tab1", SugestoesFragment.class, args)));
		this.mapTabInfo.put(tabInfo.tag, tabInfo);
		SilenciarOpcoes.AddTab(this, this.mTabHost,
				this.mTabHost.newTabSpec("Tab2").setIndicator("Opções Padrão"),
				(tabInfo = new TabInfo("Tab2", OpcoesPadraoFragment.class, args)));
		this.mapTabInfo.put(tabInfo.tag, tabInfo);
		mTabHost.setOnTabChangedListener(this);
	}
	
	private static void AddTab(SilenciarOpcoes activity,
			TabHost tabHost, TabHost.TabSpec tabSpec, TabInfo tabInfo){
		
		// attach a tab view factory to spec
		tabSpec.setContent(activity.new TabFactory(activity));
		tabHost.addTab(tabSpec);
	}



	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.silenciar_opcoes, menu);
		return true;
	}
	
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {

		switch (item.getItemId()) {
			case R.id.itSilenciar:
				mCalendar.set(Calendar.HOUR_OF_DAY, horas);
				mCalendar.set(Calendar.MINUTE, minutos);
				
				mIntentService.putExtra("calendarTimeInMillis", mCalendar.getTimeInMillis());
				startService(mIntentService);
				
				SilenceTimeWidgetProvider.onUpdateMessage(this.getApplicationContext(), diasRestantes);
				finish();
				break;
		}

		return super.onOptionsItemSelected(item);
	}

	@Override
	public String setDiasRestantes(Calendar mCalendar) {
		if (mCalendar.get(Calendar.MONTH) > calendarAtual.get(Calendar.MONTH)){
			int diaMesMCalendar = mCalendar.get(Calendar.DAY_OF_MONTH);
			int diferencaParaUltimoDiaCalendarioAtual =
					calendarAtual.getActualMaximum(Calendar.DAY_OF_MONTH) - 
					calendarAtual.get(Calendar.DAY_OF_MONTH);
			diasRestantes = diferencaParaUltimoDiaCalendarioAtual + diaMesMCalendar;
		}else{
			diasRestantes = mCalendar.get(Calendar.DAY_OF_MONTH) -
					calendarAtual.get(Calendar.DAY_OF_MONTH);
		}
		return String.valueOf(diasRestantes);
	}

	@Override
	public void onPageScrollStateChanged(int arg0) {
	}

	@Override
	public void onPageScrolled(int arg0, float arg1, int arg2) {
	}

	@Override
	public void onPageSelected(int position) {
		this.mTabHost.setCurrentTab(position);
		
	}

	@Override
	public void onTabChanged(String tag) {
		posTab = this.mTabHost.getCurrentTab();
		this.mViewPager.setCurrentItem(posTab);
	}

	@Override
	public void setCalendarTimeInMillis(long timeInMillis) {
		mCalendar.setTimeInMillis(timeInMillis);
	}
}